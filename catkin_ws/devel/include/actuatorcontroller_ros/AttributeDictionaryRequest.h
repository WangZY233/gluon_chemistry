// Generated by gencpp from file actuatorcontroller_ros/AttributeDictionaryRequest.msg
// DO NOT EDIT!


#ifndef ACTUATORCONTROLLER_ROS_MESSAGE_ATTRIBUTEDICTIONARYREQUEST_H
#define ACTUATORCONTROLLER_ROS_MESSAGE_ATTRIBUTEDICTIONARYREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/String.h>

namespace actuatorcontroller_ros
{
template <class ContainerAllocator>
struct AttributeDictionaryRequest_
{
  typedef AttributeDictionaryRequest_<ContainerAllocator> Type;

  AttributeDictionaryRequest_()
    : LookupTerm()  {
    }
  AttributeDictionaryRequest_(const ContainerAllocator& _alloc)
    : LookupTerm(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::String_<ContainerAllocator>  _LookupTerm_type;
  _LookupTerm_type LookupTerm;





  typedef boost::shared_ptr< ::actuatorcontroller_ros::AttributeDictionaryRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::actuatorcontroller_ros::AttributeDictionaryRequest_<ContainerAllocator> const> ConstPtr;

}; // struct AttributeDictionaryRequest_

typedef ::actuatorcontroller_ros::AttributeDictionaryRequest_<std::allocator<void> > AttributeDictionaryRequest;

typedef boost::shared_ptr< ::actuatorcontroller_ros::AttributeDictionaryRequest > AttributeDictionaryRequestPtr;
typedef boost::shared_ptr< ::actuatorcontroller_ros::AttributeDictionaryRequest const> AttributeDictionaryRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::actuatorcontroller_ros::AttributeDictionaryRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::actuatorcontroller_ros::AttributeDictionaryRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::actuatorcontroller_ros::AttributeDictionaryRequest_<ContainerAllocator1> & lhs, const ::actuatorcontroller_ros::AttributeDictionaryRequest_<ContainerAllocator2> & rhs)
{
  return lhs.LookupTerm == rhs.LookupTerm;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::actuatorcontroller_ros::AttributeDictionaryRequest_<ContainerAllocator1> & lhs, const ::actuatorcontroller_ros::AttributeDictionaryRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace actuatorcontroller_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::actuatorcontroller_ros::AttributeDictionaryRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::actuatorcontroller_ros::AttributeDictionaryRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::actuatorcontroller_ros::AttributeDictionaryRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::actuatorcontroller_ros::AttributeDictionaryRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::actuatorcontroller_ros::AttributeDictionaryRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::actuatorcontroller_ros::AttributeDictionaryRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::actuatorcontroller_ros::AttributeDictionaryRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "09d7751ad75650052cbe9c05d56210ee";
  }

  static const char* value(const ::actuatorcontroller_ros::AttributeDictionaryRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x09d7751ad7565005ULL;
  static const uint64_t static_value2 = 0x2cbe9c05d56210eeULL;
};

template<class ContainerAllocator>
struct DataType< ::actuatorcontroller_ros::AttributeDictionaryRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "actuatorcontroller_ros/AttributeDictionaryRequest";
  }

  static const char* value(const ::actuatorcontroller_ros::AttributeDictionaryRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::actuatorcontroller_ros::AttributeDictionaryRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/String LookupTerm\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/String\n"
"string data\n"
;
  }

  static const char* value(const ::actuatorcontroller_ros::AttributeDictionaryRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::actuatorcontroller_ros::AttributeDictionaryRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.LookupTerm);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AttributeDictionaryRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::actuatorcontroller_ros::AttributeDictionaryRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::actuatorcontroller_ros::AttributeDictionaryRequest_<ContainerAllocator>& v)
  {
    s << indent << "LookupTerm: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.LookupTerm);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ACTUATORCONTROLLER_ROS_MESSAGE_ATTRIBUTEDICTIONARYREQUEST_H
