// Generated by gencpp from file actuatorcontroller_ros/TriviaQueryResponse.msg
// DO NOT EDIT!


#ifndef ACTUATORCONTROLLER_ROS_MESSAGE_TRIVIAQUERYRESPONSE_H
#define ACTUATORCONTROLLER_ROS_MESSAGE_TRIVIAQUERYRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace actuatorcontroller_ros
{
template <class ContainerAllocator>
struct TriviaQueryResponse_
{
  typedef TriviaQueryResponse_<ContainerAllocator> Type;

  TriviaQueryResponse_()
    : VOLTAGE(0.0)
    , CURRENT_SCALE(0.0)
    , VELOCITY_SCALE(0.0)
    , ACTUATOR_TEMPERATURE(0.0)
    , INVERTER_TEMPERATURE(0.0)  {
    }
  TriviaQueryResponse_(const ContainerAllocator& _alloc)
    : VOLTAGE(0.0)
    , CURRENT_SCALE(0.0)
    , VELOCITY_SCALE(0.0)
    , ACTUATOR_TEMPERATURE(0.0)
    , INVERTER_TEMPERATURE(0.0)  {
  (void)_alloc;
    }



   typedef double _VOLTAGE_type;
  _VOLTAGE_type VOLTAGE;

   typedef double _CURRENT_SCALE_type;
  _CURRENT_SCALE_type CURRENT_SCALE;

   typedef double _VELOCITY_SCALE_type;
  _VELOCITY_SCALE_type VELOCITY_SCALE;

   typedef double _ACTUATOR_TEMPERATURE_type;
  _ACTUATOR_TEMPERATURE_type ACTUATOR_TEMPERATURE;

   typedef double _INVERTER_TEMPERATURE_type;
  _INVERTER_TEMPERATURE_type INVERTER_TEMPERATURE;





  typedef boost::shared_ptr< ::actuatorcontroller_ros::TriviaQueryResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::actuatorcontroller_ros::TriviaQueryResponse_<ContainerAllocator> const> ConstPtr;

}; // struct TriviaQueryResponse_

typedef ::actuatorcontroller_ros::TriviaQueryResponse_<std::allocator<void> > TriviaQueryResponse;

typedef boost::shared_ptr< ::actuatorcontroller_ros::TriviaQueryResponse > TriviaQueryResponsePtr;
typedef boost::shared_ptr< ::actuatorcontroller_ros::TriviaQueryResponse const> TriviaQueryResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::actuatorcontroller_ros::TriviaQueryResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::actuatorcontroller_ros::TriviaQueryResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::actuatorcontroller_ros::TriviaQueryResponse_<ContainerAllocator1> & lhs, const ::actuatorcontroller_ros::TriviaQueryResponse_<ContainerAllocator2> & rhs)
{
  return lhs.VOLTAGE == rhs.VOLTAGE &&
    lhs.CURRENT_SCALE == rhs.CURRENT_SCALE &&
    lhs.VELOCITY_SCALE == rhs.VELOCITY_SCALE &&
    lhs.ACTUATOR_TEMPERATURE == rhs.ACTUATOR_TEMPERATURE &&
    lhs.INVERTER_TEMPERATURE == rhs.INVERTER_TEMPERATURE;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::actuatorcontroller_ros::TriviaQueryResponse_<ContainerAllocator1> & lhs, const ::actuatorcontroller_ros::TriviaQueryResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace actuatorcontroller_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::actuatorcontroller_ros::TriviaQueryResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::actuatorcontroller_ros::TriviaQueryResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::actuatorcontroller_ros::TriviaQueryResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::actuatorcontroller_ros::TriviaQueryResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::actuatorcontroller_ros::TriviaQueryResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::actuatorcontroller_ros::TriviaQueryResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::actuatorcontroller_ros::TriviaQueryResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "915ec8fd7c79bafa28d8284a006d45d8";
  }

  static const char* value(const ::actuatorcontroller_ros::TriviaQueryResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x915ec8fd7c79bafaULL;
  static const uint64_t static_value2 = 0x28d8284a006d45d8ULL;
};

template<class ContainerAllocator>
struct DataType< ::actuatorcontroller_ros::TriviaQueryResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "actuatorcontroller_ros/TriviaQueryResponse";
  }

  static const char* value(const ::actuatorcontroller_ros::TriviaQueryResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::actuatorcontroller_ros::TriviaQueryResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 VOLTAGE\n"
"float64 CURRENT_SCALE\n"
"float64 VELOCITY_SCALE\n"
"float64 ACTUATOR_TEMPERATURE\n"
"float64 INVERTER_TEMPERATURE\n"
"\n"
;
  }

  static const char* value(const ::actuatorcontroller_ros::TriviaQueryResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::actuatorcontroller_ros::TriviaQueryResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.VOLTAGE);
      stream.next(m.CURRENT_SCALE);
      stream.next(m.VELOCITY_SCALE);
      stream.next(m.ACTUATOR_TEMPERATURE);
      stream.next(m.INVERTER_TEMPERATURE);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TriviaQueryResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::actuatorcontroller_ros::TriviaQueryResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::actuatorcontroller_ros::TriviaQueryResponse_<ContainerAllocator>& v)
  {
    s << indent << "VOLTAGE: ";
    Printer<double>::stream(s, indent + "  ", v.VOLTAGE);
    s << indent << "CURRENT_SCALE: ";
    Printer<double>::stream(s, indent + "  ", v.CURRENT_SCALE);
    s << indent << "VELOCITY_SCALE: ";
    Printer<double>::stream(s, indent + "  ", v.VELOCITY_SCALE);
    s << indent << "ACTUATOR_TEMPERATURE: ";
    Printer<double>::stream(s, indent + "  ", v.ACTUATOR_TEMPERATURE);
    s << indent << "INVERTER_TEMPERATURE: ";
    Printer<double>::stream(s, indent + "  ", v.INVERTER_TEMPERATURE);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ACTUATORCONTROLLER_ROS_MESSAGE_TRIVIAQUERYRESPONSE_H
