// Generated by gencpp from file actuatorcontroller_ros/AttributeLookupRequest.msg
// DO NOT EDIT!


#ifndef ACTUATORCONTROLLER_ROS_MESSAGE_ATTRIBUTELOOKUPREQUEST_H
#define ACTUATORCONTROLLER_ROS_MESSAGE_ATTRIBUTELOOKUPREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace actuatorcontroller_ros
{
template <class ContainerAllocator>
struct AttributeLookupRequest_
{
  typedef AttributeLookupRequest_<ContainerAllocator> Type;

  AttributeLookupRequest_()
    : isLookup(false)  {
    }
  AttributeLookupRequest_(const ContainerAllocator& _alloc)
    : isLookup(false)  {
  (void)_alloc;
    }



   typedef uint8_t _isLookup_type;
  _isLookup_type isLookup;





  typedef boost::shared_ptr< ::actuatorcontroller_ros::AttributeLookupRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::actuatorcontroller_ros::AttributeLookupRequest_<ContainerAllocator> const> ConstPtr;

}; // struct AttributeLookupRequest_

typedef ::actuatorcontroller_ros::AttributeLookupRequest_<std::allocator<void> > AttributeLookupRequest;

typedef boost::shared_ptr< ::actuatorcontroller_ros::AttributeLookupRequest > AttributeLookupRequestPtr;
typedef boost::shared_ptr< ::actuatorcontroller_ros::AttributeLookupRequest const> AttributeLookupRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::actuatorcontroller_ros::AttributeLookupRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::actuatorcontroller_ros::AttributeLookupRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::actuatorcontroller_ros::AttributeLookupRequest_<ContainerAllocator1> & lhs, const ::actuatorcontroller_ros::AttributeLookupRequest_<ContainerAllocator2> & rhs)
{
  return lhs.isLookup == rhs.isLookup;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::actuatorcontroller_ros::AttributeLookupRequest_<ContainerAllocator1> & lhs, const ::actuatorcontroller_ros::AttributeLookupRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace actuatorcontroller_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::actuatorcontroller_ros::AttributeLookupRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::actuatorcontroller_ros::AttributeLookupRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::actuatorcontroller_ros::AttributeLookupRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::actuatorcontroller_ros::AttributeLookupRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::actuatorcontroller_ros::AttributeLookupRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::actuatorcontroller_ros::AttributeLookupRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::actuatorcontroller_ros::AttributeLookupRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3d1a6edd8baa10d0a2d261942c1e73be";
  }

  static const char* value(const ::actuatorcontroller_ros::AttributeLookupRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3d1a6edd8baa10d0ULL;
  static const uint64_t static_value2 = 0xa2d261942c1e73beULL;
};

template<class ContainerAllocator>
struct DataType< ::actuatorcontroller_ros::AttributeLookupRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "actuatorcontroller_ros/AttributeLookupRequest";
  }

  static const char* value(const ::actuatorcontroller_ros::AttributeLookupRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::actuatorcontroller_ros::AttributeLookupRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool isLookup\n"
;
  }

  static const char* value(const ::actuatorcontroller_ros::AttributeLookupRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::actuatorcontroller_ros::AttributeLookupRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.isLookup);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AttributeLookupRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::actuatorcontroller_ros::AttributeLookupRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::actuatorcontroller_ros::AttributeLookupRequest_<ContainerAllocator>& v)
  {
    s << indent << "isLookup: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isLookup);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ACTUATORCONTROLLER_ROS_MESSAGE_ATTRIBUTELOOKUPREQUEST_H
