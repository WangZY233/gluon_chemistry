// Generated by gencpp from file actuatorcontroller_ros/DebugQueryResponse.msg
// DO NOT EDIT!


#ifndef ACTUATORCONTROLLER_ROS_MESSAGE_DEBUGQUERYRESPONSE_H
#define ACTUATORCONTROLLER_ROS_MESSAGE_DEBUGQUERYRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace actuatorcontroller_ros
{
template <class ContainerAllocator>
struct DebugQueryResponse_
{
  typedef DebugQueryResponse_<ContainerAllocator> Type;

  DebugQueryResponse_()
    : FIRMWARE_VERSION(0.0)
    , SN_ID(0)
    , ERROR_ID(0)
    , VERSION_430(0)  {
    }
  DebugQueryResponse_(const ContainerAllocator& _alloc)
    : FIRMWARE_VERSION(0.0)
    , SN_ID(0)
    , ERROR_ID(0)
    , VERSION_430(0)  {
  (void)_alloc;
    }



   typedef double _FIRMWARE_VERSION_type;
  _FIRMWARE_VERSION_type FIRMWARE_VERSION;

   typedef int64_t _SN_ID_type;
  _SN_ID_type SN_ID;

   typedef int64_t _ERROR_ID_type;
  _ERROR_ID_type ERROR_ID;

   typedef int64_t _VERSION_430_type;
  _VERSION_430_type VERSION_430;





  typedef boost::shared_ptr< ::actuatorcontroller_ros::DebugQueryResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::actuatorcontroller_ros::DebugQueryResponse_<ContainerAllocator> const> ConstPtr;

}; // struct DebugQueryResponse_

typedef ::actuatorcontroller_ros::DebugQueryResponse_<std::allocator<void> > DebugQueryResponse;

typedef boost::shared_ptr< ::actuatorcontroller_ros::DebugQueryResponse > DebugQueryResponsePtr;
typedef boost::shared_ptr< ::actuatorcontroller_ros::DebugQueryResponse const> DebugQueryResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::actuatorcontroller_ros::DebugQueryResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::actuatorcontroller_ros::DebugQueryResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::actuatorcontroller_ros::DebugQueryResponse_<ContainerAllocator1> & lhs, const ::actuatorcontroller_ros::DebugQueryResponse_<ContainerAllocator2> & rhs)
{
  return lhs.FIRMWARE_VERSION == rhs.FIRMWARE_VERSION &&
    lhs.SN_ID == rhs.SN_ID &&
    lhs.ERROR_ID == rhs.ERROR_ID &&
    lhs.VERSION_430 == rhs.VERSION_430;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::actuatorcontroller_ros::DebugQueryResponse_<ContainerAllocator1> & lhs, const ::actuatorcontroller_ros::DebugQueryResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace actuatorcontroller_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::actuatorcontroller_ros::DebugQueryResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::actuatorcontroller_ros::DebugQueryResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::actuatorcontroller_ros::DebugQueryResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::actuatorcontroller_ros::DebugQueryResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::actuatorcontroller_ros::DebugQueryResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::actuatorcontroller_ros::DebugQueryResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::actuatorcontroller_ros::DebugQueryResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "999adddc1d57c157b4896c23b703d925";
  }

  static const char* value(const ::actuatorcontroller_ros::DebugQueryResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x999adddc1d57c157ULL;
  static const uint64_t static_value2 = 0xb4896c23b703d925ULL;
};

template<class ContainerAllocator>
struct DataType< ::actuatorcontroller_ros::DebugQueryResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "actuatorcontroller_ros/DebugQueryResponse";
  }

  static const char* value(const ::actuatorcontroller_ros::DebugQueryResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::actuatorcontroller_ros::DebugQueryResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 FIRMWARE_VERSION\n"
"int64   SN_ID\n"
"int64   ERROR_ID\n"
"int64   VERSION_430\n"
"\n"
;
  }

  static const char* value(const ::actuatorcontroller_ros::DebugQueryResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::actuatorcontroller_ros::DebugQueryResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.FIRMWARE_VERSION);
      stream.next(m.SN_ID);
      stream.next(m.ERROR_ID);
      stream.next(m.VERSION_430);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DebugQueryResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::actuatorcontroller_ros::DebugQueryResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::actuatorcontroller_ros::DebugQueryResponse_<ContainerAllocator>& v)
  {
    s << indent << "FIRMWARE_VERSION: ";
    Printer<double>::stream(s, indent + "  ", v.FIRMWARE_VERSION);
    s << indent << "SN_ID: ";
    Printer<int64_t>::stream(s, indent + "  ", v.SN_ID);
    s << indent << "ERROR_ID: ";
    Printer<int64_t>::stream(s, indent + "  ", v.ERROR_ID);
    s << indent << "VERSION_430: ";
    Printer<int64_t>::stream(s, indent + "  ", v.VERSION_430);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ACTUATORCONTROLLER_ROS_MESSAGE_DEBUGQUERYRESPONSE_H
