// Generated by gencpp from file unity_robotics_demo_msgs/gluoncontrolRequest.msg
// DO NOT EDIT!


#ifndef UNITY_ROBOTICS_DEMO_MSGS_MESSAGE_GLUONCONTROLREQUEST_H
#define UNITY_ROBOTICS_DEMO_MSGS_MESSAGE_GLUONCONTROLREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace unity_robotics_demo_msgs
{
template <class ContainerAllocator>
struct gluoncontrolRequest_
{
  typedef gluoncontrolRequest_<ContainerAllocator> Type;

  gluoncontrolRequest_()
    : control_num(0)
    , speed(0)
    , move_y_distance(0.0)
    , pour_out_angle(0.0)
    , stir_circle(0)  {
    }
  gluoncontrolRequest_(const ContainerAllocator& _alloc)
    : control_num(0)
    , speed(0)
    , move_y_distance(0.0)
    , pour_out_angle(0.0)
    , stir_circle(0)  {
  (void)_alloc;
    }



   typedef int32_t _control_num_type;
  _control_num_type control_num;

   typedef int32_t _speed_type;
  _speed_type speed;

   typedef float _move_y_distance_type;
  _move_y_distance_type move_y_distance;

   typedef float _pour_out_angle_type;
  _pour_out_angle_type pour_out_angle;

   typedef int32_t _stir_circle_type;
  _stir_circle_type stir_circle;





  typedef boost::shared_ptr< ::unity_robotics_demo_msgs::gluoncontrolRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::unity_robotics_demo_msgs::gluoncontrolRequest_<ContainerAllocator> const> ConstPtr;

}; // struct gluoncontrolRequest_

typedef ::unity_robotics_demo_msgs::gluoncontrolRequest_<std::allocator<void> > gluoncontrolRequest;

typedef boost::shared_ptr< ::unity_robotics_demo_msgs::gluoncontrolRequest > gluoncontrolRequestPtr;
typedef boost::shared_ptr< ::unity_robotics_demo_msgs::gluoncontrolRequest const> gluoncontrolRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::unity_robotics_demo_msgs::gluoncontrolRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::unity_robotics_demo_msgs::gluoncontrolRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::unity_robotics_demo_msgs::gluoncontrolRequest_<ContainerAllocator1> & lhs, const ::unity_robotics_demo_msgs::gluoncontrolRequest_<ContainerAllocator2> & rhs)
{
  return lhs.control_num == rhs.control_num &&
    lhs.speed == rhs.speed &&
    lhs.move_y_distance == rhs.move_y_distance &&
    lhs.pour_out_angle == rhs.pour_out_angle &&
    lhs.stir_circle == rhs.stir_circle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::unity_robotics_demo_msgs::gluoncontrolRequest_<ContainerAllocator1> & lhs, const ::unity_robotics_demo_msgs::gluoncontrolRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace unity_robotics_demo_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::unity_robotics_demo_msgs::gluoncontrolRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::unity_robotics_demo_msgs::gluoncontrolRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::unity_robotics_demo_msgs::gluoncontrolRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::unity_robotics_demo_msgs::gluoncontrolRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::unity_robotics_demo_msgs::gluoncontrolRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::unity_robotics_demo_msgs::gluoncontrolRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::unity_robotics_demo_msgs::gluoncontrolRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a04fe4212a9377381b867c9e096854dd";
  }

  static const char* value(const ::unity_robotics_demo_msgs::gluoncontrolRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa04fe4212a937738ULL;
  static const uint64_t static_value2 = 0x1b867c9e096854ddULL;
};

template<class ContainerAllocator>
struct DataType< ::unity_robotics_demo_msgs::gluoncontrolRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "unity_robotics_demo_msgs/gluoncontrolRequest";
  }

  static const char* value(const ::unity_robotics_demo_msgs::gluoncontrolRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::unity_robotics_demo_msgs::gluoncontrolRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 control_num\n"
"int32 speed\n"
"float32 move_y_distance\n"
"float32 pour_out_angle\n"
"int32 stir_circle\n"
"\n"
;
  }

  static const char* value(const ::unity_robotics_demo_msgs::gluoncontrolRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::unity_robotics_demo_msgs::gluoncontrolRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.control_num);
      stream.next(m.speed);
      stream.next(m.move_y_distance);
      stream.next(m.pour_out_angle);
      stream.next(m.stir_circle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct gluoncontrolRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::unity_robotics_demo_msgs::gluoncontrolRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::unity_robotics_demo_msgs::gluoncontrolRequest_<ContainerAllocator>& v)
  {
    s << indent << "control_num: ";
    Printer<int32_t>::stream(s, indent + "  ", v.control_num);
    s << indent << "speed: ";
    Printer<int32_t>::stream(s, indent + "  ", v.speed);
    s << indent << "move_y_distance: ";
    Printer<float>::stream(s, indent + "  ", v.move_y_distance);
    s << indent << "pour_out_angle: ";
    Printer<float>::stream(s, indent + "  ", v.pour_out_angle);
    s << indent << "stir_circle: ";
    Printer<int32_t>::stream(s, indent + "  ", v.stir_circle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UNITY_ROBOTICS_DEMO_MSGS_MESSAGE_GLUONCONTROLREQUEST_H
