// Generated by gencpp from file gluon_control/gluondata.msg
// DO NOT EDIT!


#ifndef GLUON_CONTROL_MESSAGE_GLUONDATA_H
#define GLUON_CONTROL_MESSAGE_GLUONDATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace gluon_control
{
template <class ContainerAllocator>
struct gluondata_
{
  typedef gluondata_<ContainerAllocator> Type;

  gluondata_()
    : jointstates()
    , velocity()  {
      jointstates.assign(0.0);

      velocity.assign(0.0);
  }
  gluondata_(const ContainerAllocator& _alloc)
    : jointstates()
    , velocity()  {
  (void)_alloc;
      jointstates.assign(0.0);

      velocity.assign(0.0);
  }



   typedef boost::array<float, 6>  _jointstates_type;
  _jointstates_type jointstates;

   typedef boost::array<double, 6>  _velocity_type;
  _velocity_type velocity;





  typedef boost::shared_ptr< ::gluon_control::gluondata_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gluon_control::gluondata_<ContainerAllocator> const> ConstPtr;

}; // struct gluondata_

typedef ::gluon_control::gluondata_<std::allocator<void> > gluondata;

typedef boost::shared_ptr< ::gluon_control::gluondata > gluondataPtr;
typedef boost::shared_ptr< ::gluon_control::gluondata const> gluondataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gluon_control::gluondata_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gluon_control::gluondata_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gluon_control::gluondata_<ContainerAllocator1> & lhs, const ::gluon_control::gluondata_<ContainerAllocator2> & rhs)
{
  return lhs.jointstates == rhs.jointstates &&
    lhs.velocity == rhs.velocity;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gluon_control::gluondata_<ContainerAllocator1> & lhs, const ::gluon_control::gluondata_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gluon_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::gluon_control::gluondata_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gluon_control::gluondata_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gluon_control::gluondata_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gluon_control::gluondata_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gluon_control::gluondata_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gluon_control::gluondata_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gluon_control::gluondata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9a6bf95bbb68462827ef8c6f330e61a7";
  }

  static const char* value(const ::gluon_control::gluondata_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9a6bf95bbb684628ULL;
  static const uint64_t static_value2 = 0x27ef8c6f330e61a7ULL;
};

template<class ContainerAllocator>
struct DataType< ::gluon_control::gluondata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gluon_control/gluondata";
  }

  static const char* value(const ::gluon_control::gluondata_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gluon_control::gluondata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[6] jointstates\n"
"float64[6] velocity\n"
;
  }

  static const char* value(const ::gluon_control::gluondata_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gluon_control::gluondata_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.jointstates);
      stream.next(m.velocity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct gluondata_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gluon_control::gluondata_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gluon_control::gluondata_<ContainerAllocator>& v)
  {
    s << indent << "jointstates[]" << std::endl;
    for (size_t i = 0; i < v.jointstates.size(); ++i)
    {
      s << indent << "  jointstates[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.jointstates[i]);
    }
    s << indent << "velocity[]" << std::endl;
    for (size_t i = 0; i < v.velocity.size(); ++i)
    {
      s << indent << "  velocity[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.velocity[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // GLUON_CONTROL_MESSAGE_GLUONDATA_H
