// Generated by gencpp from file gluon/jointstate.msg
// DO NOT EDIT!


#ifndef GLUON_MESSAGE_JOINTSTATE_H
#define GLUON_MESSAGE_JOINTSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace gluon
{
template <class ContainerAllocator>
struct jointstate_
{
  typedef jointstate_<ContainerAllocator> Type;

  jointstate_()
    : jointstate1(0.0)
    , jointstate2(0.0)
    , jointstate3(0.0)
    , jointstate4(0.0)
    , jointstate5(0.0)
    , jointstate6(0.0)  {
    }
  jointstate_(const ContainerAllocator& _alloc)
    : jointstate1(0.0)
    , jointstate2(0.0)
    , jointstate3(0.0)
    , jointstate4(0.0)
    , jointstate5(0.0)
    , jointstate6(0.0)  {
  (void)_alloc;
    }



   typedef float _jointstate1_type;
  _jointstate1_type jointstate1;

   typedef float _jointstate2_type;
  _jointstate2_type jointstate2;

   typedef float _jointstate3_type;
  _jointstate3_type jointstate3;

   typedef float _jointstate4_type;
  _jointstate4_type jointstate4;

   typedef float _jointstate5_type;
  _jointstate5_type jointstate5;

   typedef float _jointstate6_type;
  _jointstate6_type jointstate6;





  typedef boost::shared_ptr< ::gluon::jointstate_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gluon::jointstate_<ContainerAllocator> const> ConstPtr;

}; // struct jointstate_

typedef ::gluon::jointstate_<std::allocator<void> > jointstate;

typedef boost::shared_ptr< ::gluon::jointstate > jointstatePtr;
typedef boost::shared_ptr< ::gluon::jointstate const> jointstateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gluon::jointstate_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gluon::jointstate_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gluon::jointstate_<ContainerAllocator1> & lhs, const ::gluon::jointstate_<ContainerAllocator2> & rhs)
{
  return lhs.jointstate1 == rhs.jointstate1 &&
    lhs.jointstate2 == rhs.jointstate2 &&
    lhs.jointstate3 == rhs.jointstate3 &&
    lhs.jointstate4 == rhs.jointstate4 &&
    lhs.jointstate5 == rhs.jointstate5 &&
    lhs.jointstate6 == rhs.jointstate6;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gluon::jointstate_<ContainerAllocator1> & lhs, const ::gluon::jointstate_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gluon

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::gluon::jointstate_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gluon::jointstate_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gluon::jointstate_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gluon::jointstate_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gluon::jointstate_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gluon::jointstate_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gluon::jointstate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ef2ac4c0926443ded25db92fc6969235";
  }

  static const char* value(const ::gluon::jointstate_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xef2ac4c0926443deULL;
  static const uint64_t static_value2 = 0xd25db92fc6969235ULL;
};

template<class ContainerAllocator>
struct DataType< ::gluon::jointstate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gluon/jointstate";
  }

  static const char* value(const ::gluon::jointstate_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gluon::jointstate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 jointstate1\n"
"float32 jointstate2\n"
"float32 jointstate3\n"
"float32 jointstate4\n"
"float32 jointstate5\n"
"float32 jointstate6\n"
"\n"
;
  }

  static const char* value(const ::gluon::jointstate_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gluon::jointstate_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.jointstate1);
      stream.next(m.jointstate2);
      stream.next(m.jointstate3);
      stream.next(m.jointstate4);
      stream.next(m.jointstate5);
      stream.next(m.jointstate6);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct jointstate_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gluon::jointstate_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gluon::jointstate_<ContainerAllocator>& v)
  {
    s << indent << "jointstate1: ";
    Printer<float>::stream(s, indent + "  ", v.jointstate1);
    s << indent << "jointstate2: ";
    Printer<float>::stream(s, indent + "  ", v.jointstate2);
    s << indent << "jointstate3: ";
    Printer<float>::stream(s, indent + "  ", v.jointstate3);
    s << indent << "jointstate4: ";
    Printer<float>::stream(s, indent + "  ", v.jointstate4);
    s << indent << "jointstate5: ";
    Printer<float>::stream(s, indent + "  ", v.jointstate5);
    s << indent << "jointstate6: ";
    Printer<float>::stream(s, indent + "  ", v.jointstate6);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GLUON_MESSAGE_JOINTSTATE_H
